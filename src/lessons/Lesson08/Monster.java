package lessons.Lesson08;

import lessons.Lesson08.BattleBoard;

public class Monster {
	
	public static int numOfMonsters = 0;
	
	public final String TOMBSTONE = "Here lies a dead monster";
	
	private int health = 500;
	private int attack = 20;
	private int movement = 2;
	public int xPosition = 0;
	public int yPosition = 0;
	
	private boolean alive = true;
	
	public String name = "Big Monster";
	public char nameChar = 'B';
	
	public int getAttack() {  
		return attack; 
	}

	public int getMovement() {
		return movement;
	}
	
	public int getHealth() {
		return health;
	}
	
	public void setHealth(int decreaseHealth) {
		health = health - decreaseHealth;
		
		if (health < 0) {
			health = 0;
			alive = false;
		}
	}
	
	public boolean getAlive() {
		return alive;
	}
	
	/* Overloading: Same method but with different arguments. 
	 * Depending on which values are passed as arguments, the correct
	 * method implementation will be used.
	 * Careful: all definitions in the method except parameters have to be the same
	 * (i.e. name, return-type etc.)
	 * */
	public void setHealth(double decreaseHealth) {
		int decrease = (int) decreaseHealth;
		health = health - decrease;
		
		if (health < 0) {
			alive = false;
		}
	}
	
	// Constructor. No return-type but same name as class
	public Monster(int newHealth, int newAttack, int newMovement, String name) {
		// this -> refers to class instance!
		this.health = newHealth;
		this.attack = newAttack;
		this.movement = newMovement;
		this.name = name;

		int randNumX, randNumY;
		
		do {
			
			randNumX = (int) (Math.random() * BattleBoard.getMaxXBoardSpace());
			randNumY = (int) (Math.random() * BattleBoard.getMaxYBoardSpace());
			
		} while (BattleBoard.battleBoard[randNumX][randNumY] != '*');
		
		this.xPosition = randNumX;
		this.yPosition = randNumY;
		
		this.nameChar = name.charAt(0);
		
		BattleBoard.battleBoard[this.xPosition][this.yPosition] = this.nameChar;
		numOfMonsters++;
	}
	
	/* This is the default constructor. It sets no attributes etc.
	 * If any constructor is defined - this default constructor will not
	 * be automatically generated by Java.
	 */
	public Monster() {
		numOfMonsters++;
	}
	
	public Monster(int newHealth) {
		this.health = newHealth;
	}
	
	public Monster(int newHealth, int newAttack) {
		// this calls the appropriate constructor which takes only health
		// (don't write code twice - just reuse it this way)
		this(newHealth);  
		
		// now we add the additional variable setting which is not 
		// covered by the constructor used above
		this.attack = newAttack;
	}
	
}

